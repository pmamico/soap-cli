#!/bin/bash
### soap-cli v1.3
soap_cli_version="v1.3"
### https://github.com/pmamico/soap-cli

### To keep the script standalone, source is divided into parts

###############################
### Part: argbash generated ###
###############################
die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}

#################################
# Part: DEFAULTS INITIALIZATION #
#################################

#POSITIONALS
_positionals=()

#OPTIONALS
_arg_update=
_arg_value=
_arg_dry="false"
_arg_interactive="false"
_arg_pretty="false"
_curl_options=

#############################
# Part: options without arg #
#############################

### --help, -h
print_help()
{
	printf '%s\n' "soap-cli $soap_cli_version" 
	printf "Send SOAP messages from command line. \n"
	# shellcheck disable=SC2183
	printf 'Usage: %b\n\033[1msoap <endpoint> <request>\033[0m [-i|--interactive] [-U|--update <arg>] [-V|--value <arg>] [-d|--dry] [-h|--help] [-p|--pretty] [--version] [curl options] \n'
	printf '\t%s\n' "<endpoint>: SOAP endpoint url"
	printf '\t%s\n' "<request>: SOAP request file"
	printf '\t%s\n' "-i, --interactive: use your XML as template, update values interactively before send"
	printf '\t%s\n' "-U, --update: update the the value by given XPath; valid only with --value option"
	printf '\t%s\n' "-V, --value: update the the value by given XPath; valid only with --update option"
	printf '\t%s\n' "-d, --dry: dry run, prints the curl command but do not execute"
	printf '\t%s\n' "-p, --pretty:  syntax highlighting"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "--version: Prints version number"
	printf '\t%s\n' "All additional arguments and options passed to curl. (see 'curl --help all')"
	printf '\t%s\n' "(except -U as proxy user, use --proxy-user instead)"
	check_requirements
}

check_requirements()
{
  if ! command -v xmlstarlet &> /dev/null
  then
      printf "\nWARNING! xmlstarlet could not be found! --update and --value options will not work properly\n"
      printf "You can install xmlstarlet with one of the following commands:\n\n"
      printf "Ubuntu\n"
      printf "sudo snap install xmlstarlet\n\n"
      printf "MacOS\n"
      printf "brew install xmlstarlet\n\n"
      printf "cygwin\n"
      printf "apt-cyg install xmlstarlet\n"
      exit
  fi
	GREP_VERSION=$(grep --version | head -n 1)
	if [[ "$GREP_VERSION" != *"GNU"* ]]; then
		 printf "\nWARNING! GNU grep not found!"
		 exit
	fi
}

### --version, -v
print_version()
{
	printf '%s\n' "soap-cli $soap_cli_version"
}

#############################
# Part: argbash parsing     #
#############################
parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-U|--update)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_update="$2"
				shift
				;;
			--update=*)
				_arg_update="${_key##--update=}"
				;;
			-U*)
				_arg_update="${_key##-u}"
				;;
			-V|--value)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_value="$2"
				shift
				;;
			--value=*)
				_arg_value="${_key##--value=}"
				;;
			-V*)
				_arg_value="${_key##-v}"
				;;
      -i|--interactive)
        _arg_interactive="true"
        ;;
      -p|--pretty)
        _arg_pretty="true"
        ;;
			-d|--dry)
				_arg_dry="true"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			--version)
				print_version
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}

###################################################
# Part: handle and assign of args and positionals #
###################################################
handle_passed_args_count()
{
	local _required_args_string="'endpoint' and 'request'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	shift "$_shift_for"

  _arg_endpoint=$1
  shift
  _arg_request=$1
  shift

  #all additional args are curl args
	while [ "${1}" != "" ]; do
		_curl_options="$_curl_options ${1}"
		shift
	done
	
	#echo "curl options: $_curl_options"
}

handle_optional_args()
{
  xml_update_needed="false"
	if [ "$_arg_update" == "" ] && [ "$_arg_value" != "" ]
	then
		die "--update and --value arguments only make sense together" 1
	fi

	if [ "$_arg_update" != "" ] && [ "$_arg_value" == "" ]
	then
		die "--update and --value arguments only make sense together" 1
	fi

	if [ "$_arg_update" != "" ] && [ "$_arg_value" != "" ]
	then
		xml_update_needed="true"
	fi
}

#####################################
# Part: xmlstarlet update if needed #
#####################################
update_xml()
{
	if [[ "$xml_update_needed" == "true" ]]
	then
		xmlstarlet edit --update "$_arg_update" --value "$_arg_value"  "$_arg_request" > soap_cli_template.xml
	fi
}

run_interactive_mode_if_enabled(){
  if [[ "$_arg_interactive" == "true" ]]
  then
      interactive_update
  fi
}

get_local_name(){
  xml_path_w_local_naming="$1"
  IFS='/' read -ra ADDR <<< "$xml_path_w_local_naming"
  for node in "${ADDR[@]}"
  do

      if [[ "$node" != *":"* ]]; then
          local_name="*[local-name()='$node']"
          xml_path_w_local_naming=${xml_path_w_local_naming/$node/$local_name}
      fi
  done
}

interactive_update(){
  xmllint --encode UTF8 --format "$_arg_request" > soap_cli_template.xml
  _arg_request="soap_cli_template.xml"
  namespaces=$(grep -oP "xmlns:.*?=[\"'].*?[\"']" $_arg_request | tr -d "\n")
  namespaces="${namespaces//xmlns:/ -N }"

  for i in $(xml el "$_arg_request"); do
      get_local_name "$i"
      xml_value_find_command="xml sel \"$namespaces\" -t --value-of \"$xml_path_w_local_naming\" $_arg_request  2>&1"
      ret=$(eval "$xml_value_find_command")
      count=$(eval "$xml_value_find_command" | wc -l)
      if [ "$count" -eq 0 ] && [ "$ret" != "" ]
      then
         node_shortname=$(echo "$i" | rev | cut -d'/' -f 1 | rev)
         default_value=$ret
         read -r -p "$node_shortname [$default_value]: " new_value
         new_value=${new_value:-$default_value}
         xml_update_command="xmlstarlet edit --inplace $namespaces --update \"$xml_path_w_local_naming\" --value $new_value soap_cli_template.xml"
         eval "$xml_update_command"
      fi
  done
  printf "\n\nREQUEST\n"
  cat soap_cli_template.xml "$HIGHLIGHT"
  printf "\n\nRESPONSE\n"
}

soap_content_type()
{
	content_type="application/soap+xml;charset=UTF-8"

	action=$(xmlstarlet sel -N wsa="http://www.w3.org/2005/08/addressing" -t -v "//wsa:Action" "$_arg_request")
	if [[ "$action" != "" ]]
	then
		content_type+=";action=\"$action\""
	fi
	echo "$content_type"
}

#################################
# Part: the actual HTTP request #
#################################
soap_call()
{
	file="$_arg_request"
	if [ "$xml_update_needed" == "true" ]
	then
		file='soap_cli_template.xml'
	fi

	content_type=$(soap_content_type)

	curl_command="curl -s $_curl_options --request POST --header 'Content-Type: $content_type' -d @$file $_arg_endpoint"

	if [ "$_arg_dry" == "true" ]
	then
		echo "$curl_command" "$HIGHLIGHT"
	else 
		eval "$curl_command" "$HIGHLIGHT"
	fi
}

set_highlight()
{
  export HIGHLIGHT=""
  if [  "$_arg_pretty" == "true" ]
  then
    if command -v highlight &> /dev/null
    then
        HIGHLIGHT="| highlight --out-format=ansi --syntax=xml"
    fi
  fi
}


##################
# Part: teardown #
##################
clean_up()
{
	if [ "$xml_update_needed" == "true" ] || [ "$_arg_interactive" == "true" ]
	then
		rm soap_cli_template.xml
	fi
}

################################################
################################################
############### Part: "Main" ###################
################################################
################################################
parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"
handle_optional_args
set_highlight
run_interactive_mode_if_enabled
update_xml
soap_call
clean_up