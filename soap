#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_POSITIONAL_SINGLE([endpoint],[SOAP endpoint url],[])
# ARG_POSITIONAL_SINGLE([request],[SOAP request file],[])
# ARG_OPTIONAL_SINGLE([update],[u],[update the the value by given XPath; valid only with value option])
# ARG_OPTIONAL_SINGLE([value],[v],[update the the value by given XPath; valid only with update option])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='uvh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_update=
_arg_value=

xml_update=

print_help()
{
	printf '%s\n' "Send SOAP messages from command line."
	printf 'Usage: %s [-u|--update <arg>] [-v|--value <arg>] [-h|--help] <endpoint> <request>\n' "$0"
	printf '\t%s\n' "<endpoint>: SOAP endpoint url"
	printf '\t%s\n' "<request>: SOAP request file"
	printf '\t%s\n' "-u, --update: update the the value by given XPath; valid only with value option (no default)"
	printf '\t%s\n' "-v, --value: update the the value by given XPath; valid only with update option (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-u|--update)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_update="$2"
				shift
				;;
			--update=*)
				_arg_update="${_key##--update=}"
				;;
			-u*)
				_arg_update="${_key##-u}"
				;;
			-v|--value)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_value="$2"
				shift
				;;
			--value=*)
				_arg_value="${_key##--value=}"
				;;
			-v*)
				_arg_value="${_key##-v}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'endpoint' and 'request'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_endpoint _arg_request "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

handle_otpional_args()
{
	if ([ "$_arg_update" == "" ] && [ "$_arg_value" != "" ])
	then
		die "--update and --value arguments only make sense together" 1
	fi

	if ([ "$_arg_update" != "" ] && [ "$_arg_value" == "" ])
	then
		die "--update and --value arguments only make sense together" 1
	fi

	if ([ "$_arg_update" != "" ] && [ "$_arg_value" != "" ])
	then
		xml_update_needed="true"
	fi
}

soap_call()
{
	file="$_arg_request"
	if ([ "$xml_update_needed" != "" ])
	then
		file='soap_cli_template.xml'
	fi

	curl -s \
	--request POST \
	--header "Content-Type: text/xml;charset=UTF-8" \
	-d @$file \
	"$_arg_endpoint" | xmllint --format -
}

update_xml()
{
	if ([ "$xml_update_needed" != "" ])
	then
		echo "xmlstarlet edit --update "$_arg_update" --value "$_arg_value"  "$_arg_request" > soap_cli_template.xml"
		xmlstarlet edit --update "$_arg_update" --value "$_arg_value"  "$_arg_request" > soap_cli_template.xml
	fi
}

clean_up()
{
	if ([ "$xml_update_needed" != "" ])
	then
		rm soap_cli_template.xml
	fi
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"
handle_otpional_args
update_xml
soap_call
clean_up
